√≥
≈í√¢√´Wc           @   s≈æ   d  Z  d d l m Z d d l m Z m Z m Z d d l Z d d l Z d d l	 Z	 d d l
 Z
 d d l Z d e f d ‚Äû  ∆í  YZ
 d e
 f d	 ‚Äû  ∆í  YZ d S(
   sÀÜ  
# ================================================================================#
#-- PROJECT NAME : Diarization package using i-vector clustering. 
#-- BACKEND : LIUM Speaker Diarization
#-- TASK : This module contains the voice DB relative classes

#-- Author : Sruthi.S
#-- Date : September 27th, 2016
# ================================================================================#
i√ø√ø√ø√ø(   t   DivisionByZeroi   (   t   srt   utilst   fmNt   VoiceDBc           B   se   e  Z d  Z d ‚Äû  Z d ‚Äû  Z d ‚Äû  Z d ‚Äû  Z d
 d
 d ‚Äû Z d ‚Äû  Z	 d ‚Äû  Z
 d ‚Äû  Z d	 ‚Äû  Z RS(   sl   A class that represent a generic voice models db.

    :type path: string
    :param path: the voice db pathc         C   s2   | |  _  d d d g |  _ i  |  _ |  j ∆í  d S(   sC   
        :type path: string
        :param path: the voice vdb patht   Ft   Mt   UN(   t   _patht   _genderst   _speakermodelst   _read_db(   t   selft   path(    (    s   voiceid_ilp/db.pyt   __init__   s    		c         C   s   |  j  S(   s√°   Get the base path of the voice models db, where are stored the voice
        model files, splitted in 3 directories according
        to the gender (F, M, U).

        :rtype: string
        :returns: the path of the voice db(   R   (   R   (    (    s   voiceid_ilp/db.pyt   get_path#   s    c         C   s
   t  ∆í  ‚Äö d S(   s‚Ä∞   Return a dictionary where the keys are the genders and the values
        are a list for every gender with the available speakers models.N(   t   NotImplementedError(   R   (    (    s   voiceid_ilp/db.pyt   get_speakers,   s    c         C   s
   t  ∆í  ‚Äö d S(   s   Read the db structureN(   R   (   R   (    (    s   voiceid_ilp/db.pyR   1   s    c         C   s
   t  ∆í  ‚Äö d S(   s  Add a voice model to the database.

        :type basefilename: string
        :param basefilename: basename including absolulute path of
            the voice file

        :type identifier: string
        :param identifier: name or label of the speaker voice in the model, in
            a single word without special characters

        :type gender: char F, M or U
        :param gender: the gender of the speaker in the model
        
        :type score: float
        :param score: the score obtained in the voice matching
        N(   R   (   R   t   basefilenamet
   identifiert   gendert   score(    (    s   voiceid_ilp/db.pyt	   add_model5   s    c         C   s
   t  ∆í  ‚Äö d S(   s√á  Remove a speaker model from the database according to the score it
        gets by matching vs the given feature file

        :type wave_file: string
        :param wave_file: the wave file

        :type identifier: string
        :param identifier: the name or label of the speaker

        :type score: float
        :param score: the score obtained in the voice matching

        :type gender: char F, M or U
        :param gender: the speaker genderN(   R   (   R   t	   wave_fileR   R   R   (    (    s   voiceid_ilp/db.pyt   remove_modelH   s    c         C   s
   t  ∆í  ‚Äö d S(   s3  Match the given feature file vs the specified speaker model.

        :type wave_file: string
        :param wave_file: the wave file

        :type identifier: string
        :param identifier: the name or label of the speaker

        :type gender: char F, M or U
        :param gender: the speaker genderN(   R   (   R   R   R   R   (    (    s   voiceid_ilp/db.pyt   match_voiceY   s    c         C   s
   t  ∆í  ‚Äö d S(   s√™   Look for the best matching speaker in the db for the given
        features file.

        :type wave_file: string
        :param wave_file: the wave file

        :type gender: char F, M or U
        :param gender: the speaker genderN(   R   (   R   R   R   (    (    s   voiceid_ilp/db.pyt   voice_lookupf   s    	c         C   s
   t  ∆í  ‚Äö d S(   s√Ñ  Look for the best matching speaker in the db for the given features
        files in the dictionary.

        :type wave_dictionary: dictionary
        :param wave_dictionary: a dict where the keys are the wave
                file extracted from the wave, and the values are the relative
                gender (char F, M or U).

        :rtype: dictionary
        :returns: a dictionary having a computed score for every voice model
        in the dbN(   R   (   R   t   wave_dictionary(    (    s   voiceid_ilp/db.pyt
   voices_lookupq   s    N(
   t   __name__t
   __module__t   __doc__R   R   R   R   t   NoneR   R   R   R   R   (    (    (    s   voiceid_ilp/db.pyR      s   								
	t
   GMMVoiceDBc           B   sh   e  Z d  Z d d ‚Äû Z d ‚Äû  Z d ‚Äû  Z d d d ‚Äû Z d ‚Äû  Z d ‚Äû  Z	 d ‚Äû  Z
 d	 ‚Äû  Z d
 ‚Äû  Z RS(   sd   A Gaussian Mixture Model voices database.

    :type path: string
    :param path: the voice db pathi   c         C   s8   t  j |  | ∆í t |  d ∆í s+ i  |  _ n  | |  _ d  S(   Nt	   __threads(   R   R   t   hasattrt   _GMMVoiceDB__threadst   _GMMVoiceDB__maxthreads(   R   R
   t   thrd_n(    (    s   voiceid_ilp/db.pyR   ‚Ä¶   s    c         C   s   | d k r | |  _  n  d S(   s¬¶   Set the max number of threads running together for the lookup task.

        :type t: integer
        :param t: max number of threads allowed to run at the same time.i    N(   R%   (   R   t   trd(    (    s   voiceid_ilp/db.pyt   set_maxthreads‚Äπ   s    c         C   s≈∏   xÀú |  j  D]¬ç } g  } t j j |  j | ∆í } y t j | ∆í } Wn$ t t f k
 rg t j | ∆í n Xg  | D] } | j	 d ∆í ro | ^ qo |  j
 | <q
 Wd S(   s/   Read for any changes the db voice models files.s   .gmmN(   R	   t   osR
   t   joinR   t   listdirt   OSErrort   IOErrort   makedirst   endswithR
   (   R   t   gent   dir_R
   t   f(    (    s   voiceid_ilp/db.pyR   ‚Äú   s    c         C   s¬ø  | d k r t  St j | | ∆í | d k rH d ‚Äû  } | | d ∆í } n  | d } t j j |  j ∆í  | | d ∆í } t j j |  j ∆í  | ∆í } t j j | | d ∆í }	 t j j | ∆í r{t j j |	 ∆í s√ú t j	 |	 ∆í n  t j
 t j j | | d ∆í |	 ∆í t j |	 ∆í }
 x+|
 D]#} t j | t j j | d | ∆í | |  j ∆í  ∆í t
 d | | | f d ∆í } x√è | D]√á }
 |
 j d ∆í rm|
 j ∆í  d	 j d
 ∆í d	 j d ∆í } |
 j d | d	 ∆í } | t d | d	 d
 ∆í } |
 j d | ∆í d	 } t t t |
 | | !∆í ∆í t | ∆í ∆í d k  r4t j |	 ∆í t  SqmqmWqWy t j |	 ∆í Wn n Xt j | | g | ∆í |  j ∆í  t St j j |	 ∆í r¬ùt j |	 ∆í n  t j | | ∆í |  j ∆í  t St  S(   s.  Add a gmm model to db.

        :type basefilename: string
        :param basefilename: the wave file basename and path

        :type identifier: string
        :param identifier: the speaker in the wave

        :type gender: char F, M or U
        :param gender: the gender of the speaker (optional)t   unknownc         S   s¬≤   i d d 6d d 6d d 6} t  |  d ∆í } xC | j ∆í  D]5 } | j d ∆í s7 | | j d ∆í d c d	 7<q7 q7 W| j ∆í  | d | d k r‚Äô d S| d | d k  r¬™ d Sd Sd
 S(   s   Identify gender from seg filei    R   R   R   t   rs   ;;t    i   i   N(   t   opent	   readlinest
   startswitht   splitt   close(   t   segfileR0   t   segt   line(    (    s   voiceid_ilp/db.pyt   _get_gender_from_seg¬∂   s    $
s   .segs   .gmmt	   _tmp_gmmss   %s.ident.%s.%s.segR4   s   ;;i   t   :t   _s   score:s    = t   ]g√¨Q¬∏‚Ä¶√´¬±?N(   t   FalseR   t	   build_gmmR    R)   R
   R*   R   t   existst   mkdirt	   split_gmmR+   t
   wav_vs_gmmR6   R8   R9   t   indext   lent   abst   floatt   shutilt   rmtreet
   merge_gmmsR   t   Truet   move(   R   R   R   R   R   R>   t   gmm_patht   orig_gmmt
   folder_db_dirt
   folder_tmpt   listgmmst   gmmR;   R=   t   snmt   idxt   iidx(    (    s   voiceid_ilp/db.pyR   ≈æ   sZ    	


	
&/


c         C   s√†  t  j j |  j ∆í  | ∆í } t  j j t  j j | | d ∆í ∆í r√út  j j | | d ∆í } t  j j | ∆í s{ t  j | ∆í n  t j t  j j | | d ∆í | ∆í t  j | ∆í } t  j j	 | ∆í d } t
 }	 t | ∆í d k r‚Ä¶x?| D]7}
 t j | t  j j | d |
 ∆í | |  j ∆í  ∆í t
 d | | |
 f d ∆í } x√£ | D]√õ } | j d ∆í r:| j ∆í  d j d ∆í d j d	 ∆í }
 | j d
 |
 d ∆í } | t d
 |
 d d ∆í } | j d | ∆í d } t t t | | | !∆í ∆í t | ∆í ∆í d
 k  rt  j t  j j | |
 ∆í ∆í t }	 qq:q:Wq√¢ Wg  } t  j | ∆í } x* | D]" }
 | j t  j j | |
 ∆í ∆í q9Wt j | t  j j | | d ∆í ∆í n<x9| D]1}
 t j | t  j j | d |
 ∆í | |  j ∆í  ∆í t
 d | | |
 f d ∆í } x√ù | D]√ï } | j d ∆í r√§| j ∆í  d j d ∆í d j d	 ∆í }
 | j d
 |
 d ∆í } | t d
 |
 d d ∆í } | j d | ∆í d } t t | | | !∆í ∆í t | ∆í k r¬πt  j t  j j | | d ∆í ∆í t }	 q¬πq√§q√§Wq≈íWt j | ∆í |  j ∆í  |	 Sd S(   sn  Remove a voice model from the db.

        :type wave_file: string
        :param wave_file: the wave file name and path

        :type identifier: string
        :param identifier: the speaker in the wave

        :type score: float
        :param score: the value of

        :type gender: char F, M or U
        :param gender: the gender of the speaker (optional)s   .gmmR?   i    i   s   %s.ident.%s.%s.segR4   s   ;;R@   RA   s   score:s    = RB   g√¨Q¬∏‚Ä¶√´¬±?N(   R)   R
   R*   R   RE   RF   R   RG   R+   t   splitextRC   RJ   RH   R6   R8   R9   RI   RK   RL   t   removeRP   t   appendRO   t   strRM   RN   R   (   R   R   R   R   R   RT   RU   RV   t   filebasenamet   removedRW   R;   R=   RX   RY   RZ   t
   listgmms_path(    (    s   voiceid_ilp/db.pyR     sd    %
	
&/
 	
	
&% 

c         C   s0  t  j j | ∆í d } yN t j | | d | |  j ∆í  ∆í d GHi  } t j | | d | d | ∆í Wn‚Äò t k
 r√∑ d GHd Gt	 ‚Äö t j
 | ∆í t j | ∆í t j | ∆í t j | | d | |  j ∆í  ∆í d GHi  } t j | | d | d | ∆í n Xi  } x+ | D]# } d G| GH| j
 | | j ∆í qW| S(	   sc  Match the voice (wave file) versus the gmm model of
        'identifier' in db.

        :type wave_file: string
        :param wave_file: wave file extracted from the wave

        :type identifier: string
        :param identifier: the speaker in the wave

        :type gender: char F, M or U
        :param gender: the gender of the speaker (optional)i    s   .gmms   IN TRYt   .s   ValueError in MATCH_VOICEs   tring to fix... s   IN EXCEPTIONt   clust(   R)   R
   R[   R   RH   R   R   t   manage_identR    t   et   _train_initt
   _train_mapt   diarizationt   updatet   speakers(   R   R   R   R   t
   wave_basenamet   clst   spkrsRc   (    (    s   voiceid_ilp/db.pyR   T  s4    
	



	
	c         C   sR   i  } xE |  j  D]: } g  |  j | D] } t j j | ∆í d ^ q$ | | <q W| S(   s‚Ä°   Return a dictionary where the keys are the genders and the values
        are a list of the available speakers models for every gender.i    (   R	   R
   R)   R
   R[   (   R   t   resultR0   t   m(    (    s   voiceid_ilp/db.pyR   ‚Ä°  s
    5c   	   	      s¬∞  |  j  ∆í  | } i  } i  ‚Ä∞  ‚Ä°  f d ‚Ä†  } g  } x/| D]'} d ÀÜ  | | | <t j |  j ∆í |  j k  r√è | j | | | ∆í t j d | d |  | | | f ∆í |  j | | | <|  j | | | j	 ∆í  q8 x, t j |  j ∆í |  j k r√Ω t
 j d ∆í q√í W| j | | | ∆í t j d | d |  | | | f ∆í |  j | | | <|  j | | | j	 ∆í  q8 WxF | D]> } |  j | j ∆í  r‚Äî|  j | j
 ∆í  n  | j ÀÜ  | ∆í qjW| S(   sn  Look for the best matching speaker in the db for the given
        features file.

        :type wave_file: string
        :param wave_file: the wave file

        :type gender: char F, M or U
        :param gender: the speaker gender

        :rtype: dictionary
        :returns: a dictionary having a computed score for every voice
                model in the db c            s%   |  j  | | | ∆í ÀÜ  | | | <d S(   s#   Internal routine to run in a ThreadN(   R   (   R   R   t   speakerR   (   t   out(    s   voiceid_ilp/db.pyt   _match_voice¬°  s    	t   targett   argsi   N(   R   R    R   t
   alive_threadsR$   R%   R]   t	   threadingt   Threadt   startt   timet   sleept   is_aliveR*   Ri   (	   R   R   R   Rj   t   resRr   t   keyst   spkt   thr(    (   Rq   s   voiceid_ilp/db.pyR   ¬ê  s2    

	$	$
c      
      s√≤  i  ‚Ä∞  i  } g  } ‚Ä°  f d ‚Ä†  } x>| D]6} | | } |  j  ∆í  | } d d l m } x| D]√ª }	 | d |	 | }
 d ÀÜ  |
 <| |  j ∆í |  j k  r√• | j |
 ∆í t j d | d |  | |	 | f ∆í |  j |
 <|  j |
 j	 ∆í  q_ x) | |  j ∆í |  j k rt
 j d ∆í q√® W| j |
 ∆í t j d | d |  | |	 | f ∆í |  j |
 <|  j |
 j	 ∆í  q_ Wq( Wx5 | D]- } |  j | j ∆í  ri|  j | j
 ∆í  qiqiWxQÀÜ  D]I} ÀÜ  | } | j d ∆í d }
 |
 | k r√ùi  | |
 <n  y | |
 } WnA t t t t f k
 r.} d	 | d
 GH| GH| j GH| j GHn Xy | j | ∆í WnU t t t t f k
 r‚Äî} d | d
 GH| GH| GHd t | ∆í GH| j GH| j GHn Xy | | |
 <Wq¬°t t t t f k
 r√©} d
 | d
 GH| GH| j GH| j GHq¬°Xq¬°W| S(   s¬†  Look for the best matching speaker in the db for the given features
         files in the dictionary.

        :type wave_dictionary: dictionary
        :param wave_dictionary: a dict where the keys are the wave, and the values are the relative
               gender (char F, M or U).

        :rtype: dictionary
        :returns: a dictionary having a computed score for every voice
                 model in the dbc            s[   y/ | d | | } |  j  | | | ∆í ÀÜ  | <Wn% t k
 rV } | GHt j d ∆í n Xd S(   s#   Internal routine to run in a Threads   ***i√ø√ø√ø√øN(   R   t	   Exceptiont   syst   exit(   R   R   Rp   R   t
   speakerkeyRe   (   Rq   (    s   voiceid_ilp/db.pyt
   __match_voice√ë  s    i√ø√ø√ø√ø(   Ru   s   ***Rs   Rt   i   i    s    c = res[wave_key] missing out[RB   s   c.update(arr) missing out[s   arr s   res[wave_key] = c missing out[N(   R   t
   voiceid.utilsRu   R    R$   R%   R]   Rv   Rw   Rx   Ry   Rz   R{   R*   R9   t	   NameErrort   KeyErrort   AttributeErrort	   TypeErrort   __dict__Rt   Ri   R^   (   R   R   R|   R}   t   _GMMVoiceDB__match_voiceR   R   Rj   t   aliveR~   R∆í   R   t   arrt   wave_keyt   cRe   (    (   Rq   s   voiceid_ilp/db.pyR   √Å  sp    




	
	






N(
   R   R   R   R   R(   R   R    R   R   R   R   R   R   (    (    (    s   voiceid_ilp/db.pyR!      s   		f	P	3			1(   R   t   decimalR    t    R   R   R   R)   RM   Rv   Ry   R¬Å   t   objectR   R!   (    (    (    s   voiceid_ilp/db.pyt   <module>   s   j
